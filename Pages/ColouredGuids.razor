@page "/colouredguids"

<div class="coloured-guids">

<h1>Find the switched guids</h1>

<div class="buttons">
    <button
        class="btn btn-primary"
        @onclick="generateGuids">
        Add Guids
    </button>
    <button
        class="btn btn-primary"
        @onclick="colourise">
        Colourise
    </button>
</div>

<p>Here are two lists of guids, press the add guids -button to add 5 more.</p>
<p>All the same guids appear in both lists, but in the list on the right two of the guids <em>may</em> have been switched. Find the switched ones.</p>

@if (pairs.Any())
{
    <table class="table pre">
        <thead>
            <tr>
                <th>Guids</th>
                <th>2 maybe switched</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var g in pairs)
            {
                <tr>
                    @if (!colouriseActive)
                    {
                    <td>@g.Item1</td>
                    <td>@g.Item2</td>
                    }
                    @if (colouriseActive)
                    {
                    <td>
                        <span style=@styleFor(g.Item1, 0, 6)>
                            @g.Item1.ToString("N").Substring(0, 6)
                        </span>-<span style=@styleFor(g.Item1, 6, 6)>
                            @g.Item1.ToString("N").Substring(6, 6)
                        </span>-<span style=@styleFor(g.Item1, 12, 6)>
                            @g.Item1.ToString("N").Substring(12, 6)
                        </span>-<span style=@styleFor(g.Item1, 18, 6)>
                            @g.Item1.ToString("N").Substring(18, 6)
                        </span>-<span style=@styleFor(g.Item1, 24, 6)>
                            @g.Item1.ToString("N").Substring(24, 6)
                        </span>
                    </td>
                    <td>
                        <span style=@styleFor(g.Item2, 0, 6)>
                            @g.Item2.ToString("N").Substring(0, 6)
                        </span>-<span style=@styleFor(g.Item2, 6, 6)>
                            @g.Item2.ToString("N").Substring(6, 6)
                        </span>-<span style=@styleFor(g.Item2, 12, 6)>
                            @g.Item2.ToString("N").Substring(12, 6)
                        </span>-<span style=@styleFor(g.Item2, 18, 6)>
                            @g.Item2.ToString("N").Substring(18, 6)
                        </span>-<span style=@styleFor(g.Item2, 24, 6)>
                            @g.Item2.ToString("N").Substring(24, 6)
                        </span>
                    </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
</div>

@code {
    IEnumerable<(Guid, Guid)> pairs = new List<(Guid, Guid)>();
    bool colouriseActive = false;

    protected override void OnInitialized()
    {
        generateGuids();
    }

    void colourise()
    {
        colouriseActive = !colouriseActive;
    }

    void generateGuids()
    {
        var guids = pairs
            .Select(p => p.Item1)
            .Union(
                Enumerable
                    .Range(1, 5)
                    .Select(x => Guid.NewGuid())
            )
            .ToList();

        var sneaky = guids
            .ToArray();

        var r = new Random();
        var positionA = r.Next(0, sneaky.Length);
        var positionB = r.Next(0, sneaky.Length);

        if (positionA != positionB)
        {
            var a = sneaky[positionA];
            var b = sneaky[positionB];
            sneaky[positionA] = b;
            sneaky[positionB] = a;
        }

        pairs = guids
            .Select((g, i) => (g, sneaky[i]));
    }

    string styleFor(Guid guid, int startIndex, int length)
    {
        var colourString = guid.ToString("N").Substring(startIndex, length);

        var red = toColourAsInt(colourString.Substring(0, 2));
        var green = toColourAsInt(colourString.Substring(2, 2));
        var blue = toColourAsInt(colourString.Substring(4, 2));

        var backgroundColor = ((red + blue + green) / 3) > 128
            ? "background-color: black;"
            : "background-color: white;" ;

        return $"color: #{colourString}; {backgroundColor};";
    }


    int toColourAsInt(string singleColourString)
    {
        Byte[] b = Convert.FromHexString(singleColourString);
        int value = b[0];
        return value;
    }
}


